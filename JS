(async () => {
  const wait = (ms) => new Promise((res) => setTimeout(res, ms));

  // Add styles for dark theme and radial blur effect inside container
  const style = document.createElement("style");
  style.textContent = `
    #flac-helper-container {
      position: fixed;
      top: 60px;
      right: 20px;
      z-index: 99999;
      background: #000000;
      border: 1px solid #222;
      box-shadow: 0 2px 10px rgba(0,0,0,0.8);
      max-height: 80vh;
      overflow-y: auto;
      width: 360px;
      font-family: sans-serif;
      padding: 10px;
      border-radius: 8px;
      color: #eee;
      /* Remove overflow: hidden to allow scrolling */
    }
    #flac-helper-container h2 {
      font-size: 16px;
      margin-bottom: 10px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      color: #aad4ff;
      position: relative;
      z-index: 10;
    }
    #flac-helper-close {
      cursor: pointer;
      font-weight: bold;
      font-size: 16px;
      border: none;
      background: none;
      color: #aad4ff;
      position: relative;
      z-index: 10;
    }
    #flac-helper-container button {
      margin: 5px 5px 10px 0;
      padding: 6px 10px;
      font-size: 13px;
      cursor: pointer;
      background: #112244;
      border: 1px solid #224488;
      color: #aad4ff;
      border-radius: 4px;
      position: relative;
      z-index: 10;
      transition: background 0.3s ease;
    }
    #flac-helper-container button:hover {
      background: #224488;
    }
    #flac-helper-list {
      display: flex;
      flex-direction: column;
      gap: 6px;
      position: relative;
      z-index: 10;
    }
    .flac-helper-item {
      display: flex;
      align-items: center;
      gap: 8px;
      padding: 4px;
      border-bottom: 1px solid #222;
      color: #ccc;
      position: relative;
      z-index: 10;
    }
    .flac-helper-item img {
      width: 60px;
      height: 34px;
      object-fit: cover;
      background: #111;
      border-radius: 4px;
    }
    .flac-helper-title {
      flex: 1;
      font-size: 13px;
      overflow: hidden;
      text-overflow: ellipsis;
      white-space: nowrap;
      color: #aad4ff;
    }
    #flac-helper-loading {
      font-size: 13px;
      margin-bottom: 10px;
      color: #666;
      position: relative;
      z-index: 10;
    }
    #radial-blur-canvas {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      z-index: 0;
      border-radius: 8px;
    }
  `;
  document.head.appendChild(style);

  // Create container
  const container = document.createElement("div");
  container.id = "flac-helper-container";

  // Create canvas for radial blur effect inside container
  const canvas = document.createElement("canvas");
  canvas.id = "radial-blur-canvas";
  container.appendChild(canvas);

  // Create a scrollable content wrapper inside container
  const contentWrapper = document.createElement("div");
  contentWrapper.id = "flac-helper-content-wrapper";
  contentWrapper.style.position = "relative";
  contentWrapper.style.zIndex = "10";
  contentWrapper.style.overflowY = "auto";
  contentWrapper.style.maxHeight = "80vh";
  contentWrapper.style.height = "100%";
  contentWrapper.style.padding = "10px";
  container.appendChild(contentWrapper);

  // Setup canvas context and size
  const ctx = canvas.getContext("2d");
  function resizeCanvas() {
    canvas.width = container.clientWidth;
    canvas.height = container.clientHeight;
  }
  resizeCanvas();
  window.addEventListener("resize", resizeCanvas);

  // Variables for radial blur effect
  let mouseX = canvas.width / 2;
  let mouseY = canvas.height / 2;
  let targetX = mouseX;
  let targetY = mouseY;

  // Update target position on mouse move inside container
  container.addEventListener("mousemove", (e) => {
    const rect = canvas.getBoundingClientRect();
    targetX = e.clientX - rect.left;
    targetY = e.clientY - rect.top;
  });

  // Animation loop for slow movement of radial blur
  function animate() {
    // Smoothly move mouseX, mouseY towards targetX, targetY
    mouseX += (targetX - mouseX) * 0.02; // very slow movement
    mouseY += (targetY - mouseY) * 0.02;

    // Clear canvas
    ctx.clearRect(0, 0, canvas.width, canvas.height);

    // Create radial gradient with blue color and blur effect
    const gradient = ctx.createRadialGradient(mouseX, mouseY, 50, mouseX, mouseY, 200);
    gradient.addColorStop(0, "rgba(0, 120, 255, 0.4)");
    gradient.addColorStop(1, "rgba(0, 0, 0, 0)");

    // Fill with gradient
    ctx.fillStyle = gradient;
    ctx.fillRect(0, 0, canvas.width, canvas.height);

    requestAnimationFrame(animate);
  }
  animate();

  // Header and close button
  const header = document.createElement("h2");
  header.innerText = "ðŸŽµ FLACloader - YT";

  const closeBtn = document.createElement("button");
  closeBtn.id = "flac-helper-close";
  closeBtn.textContent = "âœ•";
  closeBtn.onclick = () => container.remove();
  header.appendChild(closeBtn);
  contentWrapper.appendChild(header);

  // Loading text
  const loading = document.createElement("div");
  loading.id = "flac-helper-loading";
  loading.textContent = "ðŸ”„ Loading full playlist...";
  contentWrapper.appendChild(loading);
  document.body.appendChild(container);

  const videoMap = new Map();
  const base = "https://www.youtube.com";

  const extractVisibleVideos = () => {
    const items = document.querySelectorAll("#items ytd-playlist-panel-video-renderer");
    for (let item of items) {
      const a = item.querySelector("a#wc-endpoint");
      if (!a) continue;
      const href = a.getAttribute("href");
      const idMatch = href?.match(/v=([^&]+)/);
      if (!idMatch) continue;
      const videoId = idMatch[1];
      if (videoMap.has(videoId)) continue;

      const url = base + href.split("&")[0];

      const titleEl = item.querySelector("#video-title");
      const title = titleEl?.getAttribute("title")?.trim() || "Untitled";

      const thumbImg = item.querySelector("#thumbnail img");
      let img = "";
      if (thumbImg?.src?.startsWith("data:") || !thumbImg?.src) {
        const ytId = videoId;
        img = `https://i.ytimg.com/vi/${ytId}/hqdefault.jpg`;
      } else {
        img = thumbImg.src;
      }

      videoMap.set(videoId, { url, title, img });
    }
  };

  const itemsContainer = document.querySelector("#items");

  const clickVideo = async (item) => {
    const clickable = item.querySelector("a#wc-endpoint");
    clickable?.click();
    await wait(2000);
  };

  const scrollPlay = async (direction = "down") => {
    let prevCount = -1;
    let lastHref = "";
    let attempts = 0;

    while (true) {
      const items = document.querySelectorAll("#items ytd-playlist-panel-video-renderer");
      if (!items.length) break;

      const index = direction === "down" ? items.length - 1 : 0;
      const target = items[index];
      extractVisibleVideos();
      target.scrollIntoView({ behavior: "smooth", block: "center" });
      await wait(300);

      const clickable = target.querySelector("a#wc-endpoint");
      const href = clickable?.getAttribute("href");
      if (href === lastHref) {
        attempts++;
        if (attempts >= 2) break;
      } else {
        lastHref = href;
        clickable?.click();
        await wait(2000);
        extractVisibleVideos();
        prevCount = items.length;
        attempts = 0;
      }
    }
  };

  // Load downward
  await scrollPlay("down");
  // Load upward
  await scrollPlay("up");

  // Final scroll-through to load thumbnails
  const allItems = Array.from(document.querySelectorAll("#items ytd-playlist-panel-video-renderer"));
  for (let item of allItems) {
    item.scrollIntoView({ behavior: "instant", block: "center" });
    await wait(30);
  }
  extractVisibleVideos(); // Final pass

  loading.remove();

  // GUI Buttons
  const selectAllBtn = document.createElement("button");
  selectAllBtn.textContent = "Select All";

  const deselectAllBtn = document.createElement("button");
  deselectAllBtn.textContent = "Deselect All";

  const downloadBtn = document.createElement("button");
  downloadBtn.textContent = "ðŸ“¥ Download Selected (FLAC)";

  contentWrapper.appendChild(selectAllBtn);
  contentWrapper.appendChild(deselectAllBtn);
  contentWrapper.appendChild(downloadBtn);

  const list = document.createElement("div");
  list.id = "flac-helper-list";
  contentWrapper.appendChild(list);

  const videos = Array.from(videoMap.values());

  videos.forEach((video, index) => {
    const item = document.createElement("div");
    item.className = "flac-helper-item";

    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.dataset.index = index;
    checkbox.checked = true;

    const thumbnail = document.createElement("img");
    thumbnail.src = video.img;

    const titleDiv = document.createElement("div");
    titleDiv.className = "flac-helper-title";
    titleDiv.textContent = video.title;

    item.appendChild(checkbox);
    item.appendChild(thumbnail);
    item.appendChild(titleDiv);
    list.appendChild(item);
  });

  selectAllBtn.onclick = () => {
    list.querySelectorAll("input[type='checkbox']").forEach((cb) => (cb.checked = true));
  };
  deselectAllBtn.onclick = () => {
    list.querySelectorAll("input[type='checkbox']").forEach((cb) => (cb.checked = false));
  };
  downloadBtn.onclick = () => {
    const selected = Array.from(list.querySelectorAll("input[type='checkbox']"))
      .filter((cb) => cb.checked)
      .map((cb) => videos[parseInt(cb.dataset.index)].url);

    if (!selected.length) {
      alert("Please select at least one video.");
      return;
    }

    const jsonBlob = new Blob([JSON.stringify(selected.map(url => ({ url })), null, 2)], { type: "application/json" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(jsonBlob);
    a.download = `PlaylistDownloader_${Date.now()}.json`;
    a.click();
  };
})();
